import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
import matplotlib.pyplot as plt
import networkx as nx

# Activation functions
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Neural Network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        self.weights_input_hidden = np.random.rand(input_size, hidden_size) - 0.5
        self.weights_hidden_output = np.random.rand(hidden_size, output_size) - 0.5
        self.bias_hidden = np.random.rand(1, hidden_size) - 0.5
        self.bias_output = np.random.rand(1, output_size) - 0.5

    def forward(self, X):
        self.hidden_layer_activation = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_layer_output = sigmoid(self.hidden_layer_activation)
        self.output_layer_activation = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
        self.predicted_output = sigmoid(self.output_layer_activation)
        return self.predicted_output

    def backward(self, X, y, output):
        error = y - output
        d_output = error * sigmoid_derivative(output)
        error_hidden_layer = d_output.dot(self.weights_hidden_output.T)
        d_hidden_layer = error_hidden_layer * sigmoid_derivative(self.hidden_layer_output)

        self.weights_hidden_output += self.hidden_layer_output.T.dot(d_output)
        self.bias_output += np.sum(d_output, axis=0, keepdims=True)
        self.weights_input_hidden += X.T.dot(d_hidden_layer)
        self.bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True)

    def train(self, X, y, epochs):
        for _ in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)

    def predict(self, X):
        output = self.forward(X)
        return np.argmax(output, axis=1)

# Function to draw the neural network diagram
def draw_neural_network(input_size, hidden_size, output_size):
    G = nx.DiGraph()

    # Layers
    layers = [('Input', input_size), ('Hidden', hidden_size), ('Output', output_size)]
    nodes = {}

    # Add nodes
    for layer_name, layer_size in layers:
        for i in range(1, layer_size + 1):
            node_name = f'{layer_name} {i}'
            G.add_node(node_name)
            nodes[node_name] = (layers.index((layer_name, layer_size)), i - 1)

    # Add edges
    for i in range(input_size):
        for j in range(hidden_size):
            G.add_edge(f'Input {i+1}', f'Hidden {j+1}')
    for i in range(hidden_size):
        for j in range(output_size):
            G.add_edge(f'Hidden {i+1}', f'Output {j+1}')

    pos = {k: (v[0], -v[1]) for k, v in nodes.items()}  # Flip y-axis for better visualization
    nx.draw(G, pos, with_labels=True, arrows=False, node_size=3000, node_color='skyblue')
    plt.show()

# Main script
if __name__ == "__main__":
    # Load the Iris dataset
    iris = load_iris()
    X = iris.data
    y = iris.target.reshape(-1, 1)

    # One-hot encode the target labels
    encoder = OneHotEncoder(sparse=False)
    y_onehot = encoder.fit_transform(y)

    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y_onehot, test_size=0.2, random_state=42)

    # Standardize the features
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Initialize the neural network
    input_size = X_train.shape[1]
    hidden_size = 5  # Number of hidden neurons
    output_size = y_train.shape[1]

    nn = NeuralNetwork(input_size, hidden_size, output_size)

    # Train the neural network
    epochs = 10000
    nn.train(X_train, y_train, epochs)

    # Test the neural network
    y_pred = nn.predict(X_test)
    y_test_labels = np.argmax(y_test, axis=1)

    # Calculate accuracy
    accuracy = np.mean(y_pred == y_test_labels)
    print("Accuracy:", accuracy)

    # Draw the neural network
    draw_neural_network(input_size, hidden_size, output_size)
